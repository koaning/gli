{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#why-is-this-called-gli","title":"Why is this called <code>gli</code>?","text":"<p>I have so many scripts and I wanted to start re-using them. </p> <p>So I made this repo. </p> <p>I am hoping it will spark glee on the command-line.</p>"},{"location":"#whats-in-here","title":"What's in here?","text":"<p>Most of these scripts are meant to be used together with spaCy  and Prodi.gy. But there may be some general utils in here as well. </p>"},{"location":"#can-i-copy-stuff","title":"Can I copy stuff?","text":"<p>Sure, go for it.</p>"},{"location":"#can-i-contribute","title":"Can I contribute?","text":"<p>You're open to suggest a command line util to host here, but my main intention is to keep this repo as a personal utility.</p>"},{"location":"scripts/extract_phrases/","title":"extract_phrases","text":"<p>None</p>"},{"location":"scripts/extract_phrases/#arguments","title":"Arguments","text":"<ul> <li><code>file-in PATH</code>: A .json file with texts* <code>file-out PATH</code>: Output file for phrases. Will print if not provided.</li> </ul>"},{"location":"scripts/extract_phrases/#options","title":"Options","text":"<ul> <li><code>--hide-det</code> int: Only consider top <code>n</code> texts.</li> <li><code>--n</code> int: Only consider top <code>n</code> texts.</li> <li><code>--model</code> str: A spaCy model to load.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"scripts/extract_phrases/#implementation","title":"Implementation","text":"<pre><code>import itertools as it\nimport json\nfrom pathlib import Path\nfrom typing import Any, Generator\nimport spacy\nimport srsly\nimport typer\ndef fetch_phrases(stream, nlp, hide_det=False):\nfor doc in nlp.pipe(stream):\nfor chunk in doc.noun_chunks:\nif hide_det:\nyield {\"text\": \" \".join([t for t in chunk if t.pos_ != \"DET\"])}\nelse:\nyield {\"text\": chunk.text}\ndef extract_phrases(\n# fmt: off\nfile_in: Path = typer.Argument(..., help=\"A .json file with texts\"),\nfile_out: Path = typer.Argument(..., help=\"Output file for phrases. Will print if not provided.\"),\nmodel: str = typer.Option(..., help=\"A spaCy model to load.\"),\nn: int = typer.Option(None, help=\"Only consider top `n` texts.\"),\nhide_det: int = typer.Option(False, help=\"Only consider top `n` texts.\", is_flag=True),\n# fmt: on\n):\nstream = (ex[\"text\"] for ex in srsly.read_jsonl(file_in))\nif n:\nstream = it.islice(stream, n)\nnlp = spacy.load(model, disable=[\"ents\"])\nstream = fetch_phrases(stream, nlp, hide_det=hide_det)\nif file_out:\nsrsly.write_jsonl(file_out, stream)\nelse:\nfor ex in stream:\nprint(json.dumps(ex))\nif __name__ == \"__main__\":\ntyper.run(extract_phrases)\n</code></pre>"},{"location":"scripts/model_filter/","title":"model_filter","text":"<p>Filter a .jsonl file to only return content where a spaCy     model is able to detect something of interest.</p>"},{"location":"scripts/model_filter/#options","title":"Options","text":"<ul> <li><code>--ent</code> str: Path to write text into</li> <li><code>--threshold</code> float: threshold</li> <li><code>--cat</code> str: Path to write text into</li> <li><code>--spacy-model</code> Path: Path to write text into</li> <li><code>--file-out</code> Path: Path to write text into</li> <li><code>--file-in</code> Path: Path to write text into</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"scripts/model_filter/#implementation","title":"Implementation","text":"<pre><code>import json\nfrom pathlib import Path\nimport spacy\nimport srsly\nimport typer\ndef filter_categories(docs, cats, threshold):\nfor doc, context in docs:\nfound_all = all([doc.cats[c] &gt; threshold for c in cats])\nif found_all:\nyield doc, context\ndef filter_entities(docs, ents):\nfor doc, context in docs:\nfound_ents = [_.label_ for _ in doc.ents]\nfound_all = all([ent in found_ents for ent in ents])\nif found_all:\nyield doc, context\ndef model_filter(\n# fmt: off\nfile_in: Path = typer.Option(..., help=\"Path to write text into\"),\nfile_out: Path = typer.Option(..., help=\"Path to write text into\"),\nspacy_model: Path = typer.Option(..., help=\"Path to write text into\"),\ncat: str = typer.Option(..., help=\"Path to write text into\"),\nthreshold: float = typer.Option(0.5, help=\"threshold\"),\nent: str = typer.Option(..., help=\"Path to write text into\"),\n# fmt: on\n):\n\"\"\"Filter a .jsonl file to only return content where a spaCy\n    model is able to detect something of interest.\n    \"\"\"\nnlp = spacy.load(spacy_model)\nstream = (\n(doc, context)\nfor doc, context in nlp.pipe(srsly.read_jsonl(file_in), as_tuples=True)\n)\nif cat:\nstream = filter_categories(stream, cats=cat.split(\",\"), threshold=threshold)\nif ent:\nstream = filter_entities(stream, cats=cat.split(\",\"), threshold=threshold)\nstream = (context for doc, context in stream)\nif file_out:\nsrsly.write_jsonl(file_out, stream)\nelse:\nfor item in stream:\nprint(json.dumps(item))\nif __name__ == \"__main__\":\ntyper.run(content_filter)\n</code></pre>"},{"location":"scripts/rename_ner/","title":"rename_ner","text":"<p>Rename a named entity label in a Prodigy .jsonl file</p>"},{"location":"scripts/rename_ner/#options","title":"Options","text":"<ul> <li><code>--translate</code> str: Path to write text into</li> <li><code>--file-out</code> Path: Path to write text into</li> <li><code>--file-in</code> Path: Path to write text into</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"scripts/rename_ner/#implementation","title":"Implementation","text":"<pre><code>import json\nfrom pathlib import Path\nimport srsly\nimport typer\ndef replace_ents(item, table):\nfor span in item[\"spans\"]:\nfor k, v in table.items():\nif span[\"label\"] == k:\nspan[\"label\"] = v\nreturn item\ndef rename_ner(\n# fmt: off\nfile_in: Path = typer.Option(None, help=\"Path to write text into\"),\nfile_out: Path = typer.Option(None, help=\"Path to write text into\"),\ntranslate: str = typer.Option(..., help=\"Path to write text into\"),\n# fmt: on\n):\n\"\"\"Rename a named entity label in a Prodigy .jsonl file\"\"\"\npairs = [kv for kv in translate.split(\",\")]\nent_table = dict([kv.split(\":\") for kv in pairs])\nstream = (replace_ents(ex, ent_table) for ex in srsly.read_jsonl(file_in))\nif file_out:\nsrsly.write_jsonl(file_out, stream)\nelse:\nfor item in stream:\nprint(json.dumps(item))\nif __name__ == \"__main__\":\ntyper.run(content_filter)\n</code></pre>"},{"location":"scripts/text2jsonl/","title":"text2jsonl","text":"<p>Turns a text file into a jsonl file for you.</p>"},{"location":"scripts/text2jsonl/#arguments","title":"Arguments","text":"<ul> <li><code>txt-path PATH</code>: A .txt file</li> </ul>"},{"location":"scripts/text2jsonl/#options","title":"Options","text":"<ul> <li><code>--n</code> int: Only consider top <code>n</code> texts.</li> <li><code>--out-path</code> Path: Output file. Will print if not provided.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"scripts/text2jsonl/#implementation","title":"Implementation","text":"<pre><code>import json\nimport itertools as it\nfrom pathlib import Path\nimport srsly\nimport typer\ndef text2jsonl(\n# fmt: off\ntxt_path: Path = typer.Argument(..., help=\"A .txt file\"),\nout_path: Path = typer.Option(None, help=\"Output file. Will print if not provided.\"),\nn: int = typer.Option(None, help=\"Only consider top `n` texts.\"),\n# fmt: on\n):\n\"\"\"Turns a text file into a jsonl file for you.\"\"\"\nwith open(txt_path, \"r\") as f:\nlines = f.readlines()\ng = ({\"text\": text.replace(\"\\n\", \"\")} for text in lines)\nif n:\ng = it.islice(g, n)\nif out_path:\nsrsly.write_jsonl(out_path, g)\nelse:\nfor ex in g:\nprint(json.dumps(ex))\nif __name__ == \"__main__\":\ntyper.run(text2jsonl)\n</code></pre>"}]}